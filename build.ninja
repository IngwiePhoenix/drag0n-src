# a ninja build, templated off PHP

# Main rules

# Global include path
inc = ./

# Directly talk to gcc/g++
rule dgcc
  command = gcc -I$inc -o $out $in
rule dgpp
  command = g++ -I$inc -o $out $in

# Only invoke compile steps
rule gcc
  command = gcc -I$inc -o $out -c $in
rule gpp
  command = g++ -I$inc -o $out -c $in

# Configure, make, make install.
flags = 
rule unixMake
  command = ./$out/configure --prefix=build/$out $flags && make && make install

# A system command
rule exec
  command = $in

# Bring up some commands like mv, cp, rm, rmdir...
rule cp
  command = cp -v $in $out
rule cpr
  command = cp -rv $in
rule mv
  command = mv -v $in $out
rule rm
  command = rm -v $in $out
rule rmr
  command = rm -Rvf $in $out
rule rmdir
  command = rm -Rvfd $in $out

# DylibBundler, only needed if we're on Mac OS
build build/dylibbundler: dgpp $
    ./dylibbundler/src/Settings.cpp $
    ./dylibbundler/src/dylibbundler.cpp $
    ./dylibbundler/src/main.cpp $
    ./dylibbundler/src/Dependency.cpp $
    ./dylibbundler/src/Utils.cpp
  inc = ./dylibbundler/src/

# Build libraries
build libxml: unixMake
build libcurl: unixMake
build pth: unixMake
build libassaun: unixMake
build libgpg-error: unixMake
build gpg: unixMake
build gpgme: unixMake

# Build the backbone
build php: unixMake
  flags = $
    --with-curl=build/libcurl $
    --enable-pthreads

# Node comes preinstalled. so we can just copy it
build nodejs: cp nodejs/node build/

# Building the bundle by bootstrapping it via the script
build drag0n.app: exec ./wrapper/drag0n-setup

# Perform sanity checks on the bundle
build drag0n-test: exec ./wrapper/drag0n-test

# Make everything clean
build cleanup: exec ./wrapper/make-distclean

# eof, leave the trailing line as-is
